<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Sass官方文档阅读笔记]]></title>
      <url>/2017/11/07/Sass%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<ul>
<li>$height 声明变量</li>
<li>中划线命名的内容和下划线命名的内容是互通的，除了变量，也包括对混合器和Sass函数的命名</li>
<li>嵌套CSS规则</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">#content &#123;</div><div class="line">  article &#123;</div><div class="line">    h1 &#123; color: #333 &#125;</div><div class="line">    p &#123; margin-bottom: 1.4em &#125;</div><div class="line">  &#125;</div><div class="line">  aside &#123; background-color: #EEE &#125;</div><div class="line">&#125;</div><div class="line">/* 编译后 */</div><div class="line">#content article h1 &#123; color: #333 &#125;</div><div class="line">#content article p &#123; margin-bottom: 1.4em &#125;</div><div class="line">#content aside &#123; background-color: #EEE &#125;</div><div class="line"></div><div class="line">//父选择器的标识符&amp;</div><div class="line">article a &#123;</div><div class="line">  color: blue;</div><div class="line">  &amp;:hover &#123; color: red &#125;</div><div class="line">&#125;</div><div class="line">//编译后</div><div class="line">article a &#123; color: blue &#125;</div><div class="line">article a:hover &#123; color: red &#125;</div><div class="line"></div><div class="line">//群组选择器的嵌套</div><div class="line">.container &#123;</div><div class="line">  h1, h2, h3 &#123;margin-bottom: .8em&#125;</div><div class="line">&#125;</div><div class="line">nav, aside &#123;</div><div class="line">  a &#123;color: blue&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//子组合选择器和同层组合选择器：&gt;、+和~</div><div class="line">article &#123;</div><div class="line">  ~ article &#123; border-top: 1px dashed #ccc &#125;</div><div class="line">  &gt; section &#123; background: #eee &#125;</div><div class="line">  dl &gt; &#123;</div><div class="line">    dt &#123; color: #333 &#125;</div><div class="line">    dd &#123; color: #555 &#125;</div><div class="line">  &#125;</div><div class="line">  nav + &amp; &#123; margin-top: 0 &#125;</div><div class="line">&#125;</div><div class="line">//编译后</div><div class="line">article ~ article &#123; border-top: 1px dashed #ccc &#125;</div><div class="line">article &gt; footer &#123; background: #eee &#125;</div><div class="line">article dl &gt; dt &#123; color: #333 &#125;</div><div class="line">article dl &gt; dd &#123; color: #555 &#125;</div><div class="line">nav + article &#123; margin-top: 0 &#125;</div></pre></td></tr></table></figure>
<ul>
<li>嵌套属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">nav &#123;</div><div class="line">  border: &#123;</div><div class="line">  style: solid;</div><div class="line">  width: 1px;</div><div class="line">  color: #ccc;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">//编译后</div><div class="line">nav &#123;</div><div class="line">  border-style: solid;</div><div class="line">  border-width: 1px;</div><div class="line">  border-color: #ccc;</div><div class="line">&#125;</div><div class="line">nav &#123;</div><div class="line">  border: 1px solid #ccc &#123;</div><div class="line">  left: 0px;</div><div class="line">  right: 0px;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">//编译后</div><div class="line">nav &#123;</div><div class="line">  border: 1px solid #ccc;</div><div class="line">  border-left: 0px;</div><div class="line">  border-right: 0px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>导入SASS文件<br>_局部文件的文件名以下划线开头,导入<code>themes/<em>night-sky.scss</em></code>这个局部文件里的变量，你只需在样式表中写<code>@import “themes/night-sky”</code></li>
<li>!default 如果这个变量被声明赋值了，那就用它声明的值，否则就用这个默认值</li>
<li>嵌套导入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//_blue-theme.scss</div><div class="line">aside &#123;</div><div class="line">  background: blue;</div><div class="line">  color: white;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.blue-theme &#123;@import &quot;blue-theme&quot;&#125;</div><div class="line">//生成的结果跟你直接在.blue-theme选择器内写_blue-theme.scss文件的内容完全一样。</div><div class="line">.blue-theme &#123;</div><div class="line">  aside &#123;</div><div class="line">    background: blue;</div><div class="line">    color: #fff;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>静默注释</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  color: #333; // 这种注释内容不会出现在生成的css文件中</div><div class="line">  padding: 0; /* 这种注释内容会出现在生成的css文件中 */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>混合器@mixin</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">@mixin rounded-corners &#123;</div><div class="line">  -moz-border-radius: 5px;</div><div class="line">  -webkit-border-radius: 5px;</div><div class="line">  border-radius: 5px;</div><div class="line">&#125;</div><div class="line">//@include来使用这个混合器</div><div class="line">notice &#123;</div><div class="line">  background-color: green;</div><div class="line">  border: 2px solid #00aa00;</div><div class="line">  @include rounded-corners;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//混合器中的CSS规则</div><div class="line">@mixin no-bullets &#123;</div><div class="line">  list-style: none;</div><div class="line">  li &#123;</div><div class="line">    list-style-image: none;</div><div class="line">    list-style-type: none;</div><div class="line">    margin-left: 0px;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">ul.plain &#123;</div><div class="line">  color: #444;</div><div class="line">  @include no-bullets;</div><div class="line">&#125;</div><div class="line">//编译后</div><div class="line">ul.plain &#123;</div><div class="line">  color: #444;</div><div class="line">  list-style: none;</div><div class="line">&#125;</div><div class="line">ul.plain li &#123;</div><div class="line">  list-style-image: none;</div><div class="line">  list-style-type: none;</div><div class="line">  margin-left: 0px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 给混合器传参</div><div class="line">@mixin link-colors($normal, $hover, $visited) &#123;</div><div class="line">  color: $normal;</div><div class="line">  &amp;:hover &#123; color: $hover; &#125;</div><div class="line">  &amp;:visited &#123; color: $visited; &#125;</div><div class="line">&#125;</div><div class="line">a &#123;</div><div class="line">  @include link-colors(blue, red, green);</div><div class="line">&#125;</div><div class="line">//Sass最终生成的是：</div><div class="line">a &#123; color: blue; &#125;</div><div class="line">a:hover &#123; color: red; &#125;</div><div class="line">a:visited &#123; color: green; &#125;</div><div class="line"></div><div class="line">//允许通过语法$name: value的形式指定每个参数的值</div><div class="line">a &#123;</div><div class="line">    @include link-colors(</div><div class="line">      $normal: blue,</div><div class="line">      $visited: green,</div><div class="line">      $hover: red</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line">//@extend</div><div class="line">//任何跟.error有关的组合选择器样式也会被.seriousError以组合选择器的形式继承</div><div class="line">//继承是基于类的（有时是基于其他类型的选择器），所以继承应该是建立在语义化的关系上</div><div class="line">.error &#123;</div><div class="line">  border: 1px solid red;</div><div class="line">  background-color: #fdd;</div><div class="line">&#125;</div><div class="line">.seriousError &#123;</div><div class="line">  @extend .error;</div><div class="line">  border-width: 3px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//确保 / 不做除法运算而是完整地编译到 CSS 文件中，只需要用 #&#123;&#125; 插值语句将变量包</div><div class="line">p &#123;</div><div class="line">  $font-size: 12px;</div><div class="line">  $line-height: 30px;</div><div class="line">  font: #&#123;$font-size&#125;/#&#123;$line-height&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Sass </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《ECMAScript 6入门（第三版）》——Set和Map数据结构]]></title>
      <url>/2017/11/06/Set%E5%92%8CMap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<blockquote>
<h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4></blockquote>
<p>类似于数组，但是成员的值都是唯一的，没有重复的值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">const s = new Set();</div><div class="line"></div><div class="line">[2, 3, 5, 4, 5, 2, 2].forEach(x =&gt; s.add(x));</div><div class="line">for (let i of s) &#123;</div><div class="line">  console.log(i);</div><div class="line">&#125;</div><div class="line">// 2 3 5 4</div><div class="line"></div><div class="line">//接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化</div><div class="line">// 例一</div><div class="line">const set = new Set([1, 2, 3, 4, 4]);</div><div class="line">[...set]</div><div class="line">// [1, 2, 3, 4]</div><div class="line">// 例二</div><div class="line">const items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);</div><div class="line">items.size // 5</div><div class="line">// 例三</div><div class="line">function divs () &#123;</div><div class="line">  return [...document.querySelectorAll(&apos;div&apos;)];</div><div class="line">&#125;</div><div class="line">const set = new Set(divs());</div><div class="line">set.size // 56</div><div class="line">// 类似于</div><div class="line">divs().forEach(div =&gt; set.add(div));</div><div class="line">set.size // 56</div></pre></td></tr></table></figure>
<ul>
<li>接受数组作为参数</li>
<li>在 Set 内部，两个NaN是相等</li>
<li>向 Set 加入值的时候，不会发生类型转换，所以5和”5”是两个不同的值</li>
<li>Set 结构的实例默认可遍历，它的默认遍历器生成函数就是它的values方法</li>
</ul>
<h4 id="Set-实例的属性和方法"><a href="#Set-实例的属性和方法" class="headerlink" title="Set 实例的属性和方法"></a>Set 实例的属性和方法</h4><ul>
<li>Set.prototype.constructor<br>构造函数，默认就是Set函数</li>
<li>Set.prototype.size<br>返回Set实例的成员总数</li>
<li>add(value)<br>添加某个值，返回Set结构本身</li>
<li>delete(value)<br>删除某个值，返回一个布尔值，表示删除是否成功</li>
<li>has(value)<br>返回一个布尔值，表示该值是否为Set的成员</li>
<li>clear()<br>清除所有成员，没有返回值</li>
<li>keys()<br>返回键名的遍历器</li>
<li>values()<br>返回键值的遍历器</li>
<li>entries()<br>返回键值对的遍历器</li>
<li>forEach()<br>使用回调函数遍历每个成员</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">let set = new Set([&apos;red&apos;, &apos;green&apos;, &apos;blue&apos;]);</div><div class="line"></div><div class="line">for (let item of set.keys()) &#123;</div><div class="line">  console.log(item);</div><div class="line">&#125;</div><div class="line">// red</div><div class="line">// green</div><div class="line">// blue</div><div class="line"></div><div class="line">for (let item of set.values()) &#123;</div><div class="line">  console.log(item);</div><div class="line">&#125;</div><div class="line">// red</div><div class="line">// green</div><div class="line">// blue</div><div class="line"></div><div class="line">for (let item of set.entries()) &#123;</div><div class="line">  console.log(item);</div><div class="line">&#125;</div><div class="line">// [&quot;red&quot;, &quot;red&quot;]</div><div class="line">// [&quot;green&quot;, &quot;green&quot;]</div><div class="line">// [&quot;blue&quot;, &quot;blue&quot;]</div><div class="line"></div><div class="line">set = new Set([1, 4, 9]);</div><div class="line">set.forEach((value, key) =&gt; console.log(key + &apos; : &apos; + value))</div><div class="line">// 1 : 1</div><div class="line">// 4 : 4</div><div class="line">// 9 : 9</div></pre></td></tr></table></figure>
<blockquote>
<h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4></blockquote>
<p>类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const map = new Map([</div><div class="line">  [&apos;name&apos;, &apos;张三&apos;],</div><div class="line">  [&apos;title&apos;, &apos;Author&apos;]</div><div class="line">]);</div><div class="line"></div><div class="line">map.size // 2</div><div class="line">map.has(&apos;name&apos;) // true</div><div class="line">map.get(&apos;name&apos;) // &quot;张三&quot;</div><div class="line">map.has(&apos;title&apos;) // true</div><div class="line">map.get(&apos;title&apos;) // &quot;Author&quot;</div></pre></td></tr></table></figure>
<ul>
<li>对同一个键多次赋值，后面的值将覆盖前面的值</li>
<li>读取一个未知的键，则返回undefined</li>
<li>只有对同一个对象的引用，Map 结构才将其视为同一个键</li>
</ul>
<h4 id="实例的属性和操作方法"><a href="#实例的属性和操作方法" class="headerlink" title="实例的属性和操作方法"></a>实例的属性和操作方法</h4><ul>
<li>size<br>返回 Map 结构的成员总数</li>
<li>set(key, value)</li>
<li>get(key)</li>
<li>has(key)</li>
<li>delete(key)</li>
<li>clear()</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《ECMAScript 6入门（第三版）》——Symbol]]></title>
      <url>/2017/11/05/Symbol/</url>
      <content type="html"><![CDATA[<p>原始数据类型Symbol，表示独一无二的值<br><em>接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">let s = Symbol();</div><div class="line">typeof s</div><div class="line">// &quot;symbol&quot;</div><div class="line"></div><div class="line">let s1 = Symbol(&apos;foo&apos;);</div><div class="line">let s2 = Symbol(&apos;bar&apos;);</div><div class="line">s1 // Symbol(foo)</div><div class="line">s2 // Symbol(bar)</div><div class="line">s1.toString() // &quot;Symbol(foo)&quot;</div><div class="line">s2.toString() // &quot;Symbol(bar)&quot;</div><div class="line"></div><div class="line">//Symbol函数的参数只是表示对当前 Symbol 值的描述，因此相同参数的Symbol函数的返回值是不相等的</div><div class="line">// 没有参数的情况</div><div class="line">let s1 = Symbol();</div><div class="line">let s2 = Symbol();</div><div class="line">s1 === s2 // false</div><div class="line">// 有参数的情况</div><div class="line">let s1 = Symbol(&apos;foo&apos;);</div><div class="line">let s2 = Symbol(&apos;foo&apos;);</div><div class="line">s1 === s2 // false</div><div class="line"></div><div class="line">//不能与其他类型的值进行运算</div><div class="line">let sym = Symbol(&apos;My symbol&apos;);</div><div class="line">&quot;your symbol is &quot; + sym</div><div class="line">// TypeError: can&apos;t convert symbol to string</div><div class="line">`your symbol is $&#123;sym&#125;`</div><div class="line">// TypeError: can&apos;t convert symbol to string</div><div class="line"></div><div class="line">//可以显式转为字符串</div><div class="line">let sym = Symbol(&apos;My symbol&apos;);</div><div class="line">String(sym) // &apos;Symbol(My symbol)&apos;</div><div class="line">sym.toString() // &apos;Symbol(My symbol)&apos;</div><div class="line"></div><div class="line">//可以转为布尔值，但是不能转为数值</div><div class="line">let sym = Symbol();</div><div class="line">Boolean(sym) // true</div><div class="line">!sym  // false</div><div class="line">if (sym) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line">Number(sym) // TypeError</div><div class="line">sym + 2 // TypeError</div><div class="line"></div><div class="line">//Symbol 值作为对象属性名时，不能用点运算符</div><div class="line">const mySymbol = Symbol();</div><div class="line">const a = &#123;&#125;;</div><div class="line">a.mySymbol = &apos;Hello!&apos;;</div><div class="line">a[mySymbol] // undefined</div><div class="line">a[&apos;mySymbol&apos;] // &quot;Hello!&quot;</div><div class="line"></div><div class="line">//在对象的内部，使用 Symbol 值定义属性时，Symbol 值必须放在方括号之中</div><div class="line">let s = Symbol();</div><div class="line">let obj = &#123;</div><div class="line">  [s]: function (arg) &#123; ... &#125;</div><div class="line">&#125;;</div><div class="line">obj[s](123);</div></pre></td></tr></table></figure></p>
<h4 id="属性名的遍历"><a href="#属性名的遍历" class="headerlink" title="属性名的遍历"></a>属性名的遍历</h4><ul>
<li>Object.getOwnPropertySymbols()<br>返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值</li>
<li>Reflect.ownKeys()<br>返回所有类型的键名，包括常规键名和 Symbol 键名</li>
</ul>
<h4 id="Symbol-for-，Symbol-keyFor"><a href="#Symbol-for-，Symbol-keyFor" class="headerlink" title="Symbol.for()，Symbol.keyFor()"></a>Symbol.for()，Symbol.keyFor()</h4><ul>
<li>Symbol.for()<br>接受一个字符串作为参数，然后搜索有没有以该参数作为名称的Symbol值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let s1 = Symbol.for(&apos;foo&apos;);</div><div class="line">let s2 = Symbol.for(&apos;foo&apos;);</div><div class="line">s1 === s2 // true</div></pre></td></tr></table></figure>
<ul>
<li>Symbol.keyFor()<br>返回一个已登记的 Symbol 类型值的key</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let s1 = Symbol.for(&quot;foo&quot;);</div><div class="line">Symbol.keyFor(s1) // &quot;foo&quot;</div><div class="line">let s2 = Symbol(&quot;foo&quot;);</div><div class="line">Symbol.keyFor(s2) // undefined</div></pre></td></tr></table></figure>
<h4 id="内置的Symbol值"><a href="#内置的Symbol值" class="headerlink" title="内置的Symbol值"></a>内置的Symbol值</h4><ul>
<li>Symbol.hasInstance<br>foo instanceof Foo在语言内部，实际调用的是Foo<a href="foo">Symbol.hasInstance</a></li>
<li>Symbol.isConcatSpreadable<br>等于一个布尔值，表示该对象用于Array.prototype.concat()时，是否可以展开</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let arr1 = [&apos;c&apos;, &apos;d&apos;];</div><div class="line">[&apos;a&apos;, &apos;b&apos;].concat(arr1, &apos;e&apos;) // [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]</div><div class="line">arr1[Symbol.isConcatSpreadable] // undefined</div><div class="line"></div><div class="line">let arr2 = [&apos;c&apos;, &apos;d&apos;];</div><div class="line">arr2[Symbol.isConcatSpreadable] = false;</div><div class="line">[&apos;a&apos;, &apos;b&apos;].concat(arr2, &apos;e&apos;) // [&apos;a&apos;, &apos;b&apos;, [&apos;c&apos;,&apos;d&apos;], &apos;e&apos;]</div></pre></td></tr></table></figure>
<ul>
<li>Symbol.species<br>指向当前对象的构造函数。创造实例时，默认会调用这个方法，即使用这个属性返回的函数当作构造函数，来创造新的实例对象</li>
</ul>
<p>-Symbol.match<br>指向一个函数。当执行str.match(myObject)时，如果该属性存在，会调用它，返回该方法的返回值</p>
<ul>
<li>Symbol.replace<br>指向一个方法，当该对象被String.prototype.replace方法调用时，会返回该方法的返回值</li>
</ul>
<ul>
<li>Symbol.search<br>指向一个方法，当该对象被String.prototype.search方法调用时，会返回该方法的返回值</li>
</ul>
<ul>
<li>Symbol.split<br>指向一个方法，当该对象被String.prototype.split方法调用时，会返回该方法的返回值</li>
</ul>
<ul>
<li>Symbol.iterator<br>指向该对象的默认遍历器方法</li>
</ul>
<ul>
<li>Symbol.toPrimitive<br>指向一个方法。该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值</li>
</ul>
<ul>
<li>Symbol.toStringTag<br>这个属性可以用来定制[object Object]或[object Array]中object后面的那个字符串</li>
</ul>
<ul>
<li>Symbol.unscopables<br>指向一个对象。该对象指定了使用with关键字时，哪些属性会被with环境排除</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《ECMAScript 6入门（第三版）》——对象扩展]]></title>
      <url>/2017/11/05/%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h4 id="属性和方法简写"><a href="#属性和方法简写" class="headerlink" title="属性和方法简写"></a>属性和方法简写</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">const foo = &apos;bar&apos;;</div><div class="line">const baz = &#123;foo&#125;;</div><div class="line">baz // &#123;foo: &quot;bar&quot;&#125;</div><div class="line">// 等同于</div><div class="line">const baz = &#123;foo: foo&#125;;</div><div class="line"></div><div class="line">function f(x, y) &#123;</div><div class="line">  return &#123;x, y&#125;;</div><div class="line">&#125;</div><div class="line">// 等同于</div><div class="line">function f(x, y) &#123;</div><div class="line">  return &#123;x: x, y: y&#125;;</div><div class="line">&#125;</div><div class="line">f(1, 2) // Object &#123;x: 1, y: 2&#125;</div><div class="line"></div><div class="line">const o = &#123;</div><div class="line">  method() &#123;</div><div class="line">    return &quot;Hello!&quot;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">// 等同于</div><div class="line">const o = &#123;</div><div class="line">  method: function() &#123;</div><div class="line">    return &quot;Hello!&quot;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h4><p>字面量定义对象时，用方法二（表达式）作为对象的属性名，即把表达式放在方括号内</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let propKey = &apos;foo&apos;;</div><div class="line">let obj = &#123;</div><div class="line">  [propKey]: true,</div><div class="line">  [&apos;a&apos; + &apos;bc&apos;]: 123</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="方法的name属性"><a href="#方法的name属性" class="headerlink" title="方法的name属性"></a>方法的name属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//方法使用了取值函数（getter）和存值函数（setter），则name属性不是在该方法上面，而是该方法的属性的描述对象的get和set属性上面，返回值是方法名前加上get和set</div><div class="line">const descriptor = Object.getOwnPropertyDescriptor(obj, &apos;foo&apos;);</div><div class="line">descriptor.get.name // &quot;get foo&quot;</div><div class="line">descriptor.set.name // &quot;set foo&quot;</div><div class="line"></div><div class="line">//bind方法创造的函数，name属性返回bound加上原函数的名字；Function构造函数创造的函数，name属性返回anonymous</div><div class="line">(new Function()).name // &quot;anonymous&quot;</div><div class="line">var doSomething = function() &#123;</div><div class="line">  // ...</div><div class="line">&#125;;</div><div class="line">doSomething.bind().name // &quot;bound doSomething&quot;</div><div class="line"></div><div class="line">//如果对象的方法是一个 Symbol 值，那么name属性返回的是这个 Symbol 值的描述</div><div class="line">const key1 = Symbol(&apos;description&apos;);</div><div class="line">const key2 = Symbol();</div><div class="line">let obj = &#123;</div><div class="line">  [key1]() &#123;&#125;,</div><div class="line">  [key2]() &#123;&#125;,</div><div class="line">&#125;;</div><div class="line">obj[key1].name // &quot;[description]&quot;</div><div class="line">obj[key2].name // &quot;&quot;</div></pre></td></tr></table></figure>
<h4 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h4><p>用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Object.is(&apos;foo&apos;, &apos;foo&apos;)</div><div class="line">// true</div><div class="line">Object.is(&#123;&#125;, &#123;&#125;)</div><div class="line">// false</div><div class="line"></div><div class="line">+0 === -0 //true</div><div class="line">NaN === NaN // false</div><div class="line">Object.is(+0, -0) // false</div><div class="line">Object.is(NaN, NaN) // true</div></pre></td></tr></table></figure>
<h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h4><p>对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）<br>如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">const target = &#123; a: 1 &#125;;</div><div class="line">const source1 = &#123; b: 2 &#125;;</div><div class="line">const source2 = &#123; c: 3 &#125;;</div><div class="line">Object.assign(target, source1, source2);</div><div class="line">target // &#123;a:1, b:2, c:3&#125;</div><div class="line"></div><div class="line">//只有一个参数，Object.assign会直接返回该参数</div><div class="line">const obj = &#123;a: 1&#125;;</div><div class="line">Object.assign(obj) === obj // true</div><div class="line"></div><div class="line">//该参数不是对象，则会先转成对象，然后返回</div><div class="line">typeof Object.assign(2) // &quot;object&quot;</div></pre></td></tr></table></figure>
<h5 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h5><ul>
<li>为对象添加属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class Point &#123;</div><div class="line">  constructor(x, y) &#123;</div><div class="line">    Object.assign(this, &#123;x, y&#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>为对象添加方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Object.assign(SomeClass.prototype, &#123;</div><div class="line">  someMethod(arg1, arg2) &#123;</div><div class="line">    ···</div><div class="line">  &#125;,</div><div class="line">  anotherMethod() &#123;</div><div class="line">    ···</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">// 等同于下面的写法</div><div class="line">SomeClass.prototype.someMethod = function (arg1, arg2) &#123;</div><div class="line">  ···</div><div class="line">&#125;;</div><div class="line">SomeClass.prototype.anotherMethod = function () &#123;</div><div class="line">  ···</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>克隆对象</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function clone(origin) &#123;</div><div class="line">  return Object.assign(&#123;&#125;, origin);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>合并多个对象</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const merge =</div><div class="line">  (target, ...sources) =&gt; Object.assign(target, ...sources);</div></pre></td></tr></table></figure>
<ul>
<li>为属性指定默认值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const DEFAULTS = &#123;</div><div class="line">  logLevel: 0,</div><div class="line">  outputFormat: &apos;html&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">function processContent(options) &#123;</div><div class="line">  options = Object.assign(&#123;&#125;, DEFAULTS, options);</div><div class="line">  console.log(options);</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="属性的遍历"><a href="#属性的遍历" class="headerlink" title="属性的遍历"></a>属性的遍历</h4><ul>
<li>for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）</li>
<li>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名</li>
<li>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名</li>
<li>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名</li>
<li>Reflect.ownKeys返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举</li>
</ul>
<h4 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a>Object.getOwnPropertyDescriptors()</h4><p>返回指定对象所有自身属性（非继承属性）的描述对象</p>
<h4 id="proto属性，Object-setPrototypeOf-，Object-getPrototypeOf"><a href="#proto属性，Object-setPrototypeOf-，Object-getPrototypeOf" class="headerlink" title="proto属性，Object.setPrototypeOf()，Object.getPrototypeOf()"></a><strong>proto</strong>属性，Object.setPrototypeOf()，Object.getPrototypeOf()</h4><ul>
<li><strong>proto</strong> 读取或设置当前对象的prototype对象</li>
<li>Object.setPrototypeOf() 设置一个对象的prototype对象，返回参数对象本身</li>
<li>Object.getPrototypeOf() 读取一个对象的原型对象</li>
</ul>
<h4 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h4><p>指向当前对象的原型对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const proto = &#123;</div><div class="line">  foo: &apos;hello&apos;</div><div class="line">&#125;;</div><div class="line">const obj = &#123;</div><div class="line">  find() &#123;</div><div class="line">    return super.foo;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">Object.setPrototypeOf(obj, proto);</div><div class="line">obj.find() // &quot;hello&quot;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《ECMAScript 6入门（第三版）》——数组扩展]]></title>
      <url>/2017/11/05/%E6%95%B0%E7%BB%84%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h4 id="扩展运算符（…）"><a href="#扩展运算符（…）" class="headerlink" title="扩展运算符（…）"></a>扩展运算符（…）</h4><p>将一个数组转为用逗号分隔的参数序列</p>
<h5 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h5><ul>
<li>复制数组</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const a1 = [1, 2];</div><div class="line">// 写法一</div><div class="line">const a2 = [...a1];</div><div class="line">// 写法二</div><div class="line">const [...a2] = a1;</div></pre></td></tr></table></figure>
<ul>
<li>合并数组</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[...arr1, ...arr2, ...arr3]</div><div class="line">// [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos; ]</div></pre></td></tr></table></figure>
<ul>
<li>与解构赋值结合</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[a, ...rest] = list</div></pre></td></tr></table></figure>
<ul>
<li>字符串</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[...&apos;hello&apos;]</div><div class="line">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</div></pre></td></tr></table></figure>
<ul>
<li>实现了 Iterator 接口的对象</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let nodeList = document.querySelectorAll(&apos;div&apos;);</div><div class="line">let array = [...nodeList];</div></pre></td></tr></table></figure>
<ul>
<li>Map 和 Set 结构，Generator 函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">let map = new Map([</div><div class="line">  [1, &apos;one&apos;],</div><div class="line">  [2, &apos;two&apos;],</div><div class="line">  [3, &apos;three&apos;],</div><div class="line">]);</div><div class="line">let arr = [...map.keys()]; // [1, 2, 3]</div><div class="line"></div><div class="line">const go = function*()&#123;</div><div class="line">  yield 1;</div><div class="line">  yield 2;</div><div class="line">  yield 3;</div><div class="line">&#125;;</div><div class="line">[...go()] // [1, 2, 3]</div></pre></td></tr></table></figure>
<h4 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h4><p>将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）,如果map函数里面用到了this关键字，还可以传入Array.from的第三个参数，用来绑定this</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">let arrayLike = &#123;</div><div class="line">    &apos;0&apos;: &apos;a&apos;,</div><div class="line">    &apos;1&apos;: &apos;b&apos;,</div><div class="line">    &apos;2&apos;: &apos;c&apos;,</div><div class="line">    length: 3</div><div class="line">&#125;;</div><div class="line">let arr2 = Array.from(arrayLike); // [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</div><div class="line"></div><div class="line">//可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</div><div class="line">Array.from(arrayLike, x =&gt; x * x);</div></pre></td></tr></table></figure>
<h4 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h4><p>将一组值，转换为数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Array.of(3, 11, 8) // [3,11,8]</div><div class="line">Array.of(3) // [3]</div><div class="line">Array.of(3).length // 1</div></pre></td></tr></table></figure>
<h4 id="数组实例的-copyWithin"><a href="#数组实例的-copyWithin" class="headerlink" title="数组实例的 copyWithin()"></a>数组实例的 copyWithin()</h4><p>在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//三个参数</div><div class="line">//target（必需）：从该位置开始替换数据。</div><div class="line">//start（可选）：从该位置开始读取数据，默认为0。如果为负值，表示倒数。</div><div class="line">//end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。</div><div class="line">Array.prototype.copyWithin(target, start = 0, end = this.length)</div><div class="line"></div><div class="line">[1, 2, 3, 4, 5].copyWithin(0, 3)</div><div class="line">// [4, 5, 3, 4, 5]</div></pre></td></tr></table></figure>
<h4 id="数组实例的-find-和-findIndex"><a href="#数组实例的-find-和-findIndex" class="headerlink" title="数组实例的 find() 和 findIndex()"></a>数组实例的 find() 和 findIndex()</h4><p>find方法，用于找出第一个符合条件的数组成员，参数是一个回调函数<br>findIndex方法，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[1, 4, -5, 10].find((n) =&gt; n &lt; 0)</div><div class="line">// -5</div><div class="line"></div><div class="line">[1, 5, 10, 15].findIndex(function(value, index, arr) &#123;</div><div class="line">  return value &gt; 9;</div><div class="line">&#125;) // 2</div></pre></td></tr></table></figure>
<h4 id="数组实例的fill"><a href="#数组实例的fill" class="headerlink" title="数组实例的fill()"></a>数组实例的fill()</h4><p>使用给定值，填充一个数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;].fill(7)</div><div class="line">// [7, 7, 7]</div><div class="line"></div><div class="line">new Array(3).fill(7)</div><div class="line">// [7, 7, 7]</div><div class="line"></div><div class="line">//接受第二个和第三个参数，用于指定填充的起始位置和结束位置</div><div class="line">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;].fill(7, 1, 2)</div><div class="line">// [&apos;a&apos;, 7, &apos;c&apos;]</div></pre></td></tr></table></figure>
<h4 id="数组实例的-entries-，keys-和-values"><a href="#数组实例的-entries-，keys-和-values" class="headerlink" title="数组实例的 entries()，keys() 和 values()"></a>数组实例的 entries()，keys() 和 values()</h4><p>遍历数组，都返回一个遍历器对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//对键名的遍历</div><div class="line">for (let index of [&apos;a&apos;, &apos;b&apos;].keys()) &#123;</div><div class="line">  console.log(index);</div><div class="line">&#125;</div><div class="line">// 0</div><div class="line">// 1</div><div class="line"></div><div class="line">//对键值的遍历</div><div class="line">for (let elem of [&apos;a&apos;, &apos;b&apos;].values()) &#123;</div><div class="line">  console.log(elem);</div><div class="line">&#125;</div><div class="line">// &apos;a&apos;</div><div class="line">// &apos;b&apos;</div><div class="line"></div><div class="line">//对键值对的遍历</div><div class="line">for (let [index, elem] of [&apos;a&apos;, &apos;b&apos;].entries()) &#123;</div><div class="line">  console.log(index, elem);</div><div class="line">&#125;</div><div class="line">// 0 &quot;a&quot;</div><div class="line">// 1 &quot;b&quot;</div><div class="line"></div><div class="line">let letter = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</div><div class="line">let entries = letter.entries();</div><div class="line">console.log(entries.next().value); // [0, &apos;a&apos;]</div><div class="line">console.log(entries.next().value); // [1, &apos;b&apos;]</div><div class="line">console.log(entries.next().value); // [2, &apos;c&apos;]</div></pre></td></tr></table></figure>
<h4 id="数组实例的includes"><a href="#数组实例的includes" class="headerlink" title="数组实例的includes()"></a>数组实例的includes()</h4><p>Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[1, 2, 3].includes(2)     // true</div><div class="line">[1, 2, 3].includes(4)     // false</div><div class="line">[1, 2, NaN].includes(NaN) // true</div><div class="line"></div><div class="line">//第二个参数表示搜索的起始位置，默认为0</div><div class="line">[1, 2, 3].includes(3, 3);  // false</div><div class="line">[1, 2, 3].includes(3, -1); // true</div></pre></td></tr></table></figure>
<h4 id="数组的空位"><a href="#数组的空位" class="headerlink" title="数组的空位"></a>数组的空位</h4><p>空位转为undefined</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《ECMAScript 6入门（第三版）》——函数扩展]]></title>
      <url>/2017/11/05/%E5%87%BD%E6%95%B0%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h4 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h4><p>（形式为…变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中<br><em>函数的length属性，不包括 rest 参数</em></p>
<h4 id="name属性"><a href="#name属性" class="headerlink" title="name属性"></a>name属性</h4><p>返回该函数的函数名</p>
<h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><ul>
<li>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</li>
</ul>
<ul>
<li>不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</li>
</ul>
<ul>
<li>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</li>
</ul>
<ul>
<li>不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</li>
</ul>
<h4 id="双冒号运算符（-）"><a href="#双冒号运算符（-）" class="headerlink" title="双冒号运算符（::）"></a>双冒号运算符（::）</h4><p>该运算符会自动将左边的对象，作为上下文环境（即this对象），绑定到右边的函数上面</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《ECMAScript 6入门（第三版）》——数值扩展]]></title>
      <url>/2017/11/05/%E6%95%B0%E5%80%BC%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h4 id="二进制和八进制表示法"><a href="#二进制和八进制表示法" class="headerlink" title="二进制和八进制表示法"></a>二进制和八进制表示法</h4><p>前缀0b（或0B）和0o（或0O）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//将0b和0o前缀的字符串数值转为十进制</div><div class="line">Number(&apos;0b111&apos;)  // 7</div><div class="line">Number(&apos;0o10&apos;)  // 8</div></pre></td></tr></table></figure>
<h4 id="Number-isFinite-，Number-isNaN"><a href="#Number-isFinite-，Number-isNaN" class="headerlink" title="Number.isFinite()，Number.isNaN()"></a>Number.isFinite()，Number.isNaN()</h4><h4 id="Number-parseInt-Number-parseFloat"><a href="#Number-parseInt-Number-parseFloat" class="headerlink" title="Number.parseInt(), Number.parseFloat()"></a>Number.parseInt(), Number.parseFloat()</h4><h4 id="Number-isInteger"><a href="#Number-isInteger" class="headerlink" title="Number.isInteger()"></a>Number.isInteger()</h4><h4 id="Number-EPSILON"><a href="#Number-EPSILON" class="headerlink" title="Number.EPSILON"></a>Number.EPSILON</h4><p>表示1与大于1的最小浮点数之间的差</p>
<h4 id="安全整数和-Number-isSafeInteger"><a href="#安全整数和-Number-isSafeInteger" class="headerlink" title="安全整数和 Number.isSafeInteger()"></a>安全整数和 Number.isSafeInteger()</h4><p>能够准确表示的整数范围在-2^53到2^53之间（不含两个端点）</p>
<h4 id="Math对象的扩展"><a href="#Math对象的扩展" class="headerlink" title="Math对象的扩展"></a>Math对象的扩展</h4><h5 id="Math-trunc"><a href="#Math-trunc" class="headerlink" title="Math.trunc()"></a>Math.trunc()</h5><p>方法用于去除一个数的小数部分，返回整数部分<br>对于非数值，Math.trunc内部使用Number方法将其先转为数值<br>对于空值和无法截取整数的值，返回NaN</p>
<h5 id="Math-sign"><a href="#Math-sign" class="headerlink" title="Math.sign()"></a>Math.sign()</h5><p>判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值<br>它会返回五种值<br>参数为正数，返回+1；<br>参数为负数，返回-1；<br>参数为0，返回0；<br>参数为-0，返回-0;<br>其他值，返回NaN。</p>
<h5 id="Math-cbrt"><a href="#Math-cbrt" class="headerlink" title="Math.cbrt()"></a>Math.cbrt()</h5><p>计算一个数的立方根</p>
<h4 id="指数运算符（-）"><a href="#指数运算符（-）" class="headerlink" title="指数运算符（**）"></a>指数运算符（**）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">2 ** 2 // 4</div><div class="line">2 ** 3 // 8</div><div class="line"></div><div class="line">let a = 1.5;</div><div class="line">a **= 2;</div><div class="line">// 等同于 a = a * a;</div><div class="line"></div><div class="line">let b = 4;</div><div class="line">b **= 3;</div><div class="line">// 等同于 b = b * b * b;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《ECMAScript 6入门（第三版）》——正则表达式扩展]]></title>
      <url>/2017/11/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h4 id="RegExp构造函数"><a href="#RegExp构造函数" class="headerlink" title="RegExp构造函数"></a>RegExp构造函数</h4><p>RegExp构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">new RegExp(/abc/ig, &apos;i&apos;).flags</div><div class="line">// &quot;i&quot;</div></pre></td></tr></table></figure>
<h4 id="u修饰符"><a href="#u修饰符" class="headerlink" title="u修饰符"></a>u修饰符</h4><p>含义为“Unicode模式”，用来正确处理大于\uFFFF的 Unicode 字符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/^\uD83D/u.test(&apos;\uD83D\uDC2A&apos;) // false</div><div class="line">/^\uD83D/.test(&apos;\uD83D\uDC2A&apos;) // true</div></pre></td></tr></table></figure>
<h4 id="y修饰符"><a href="#y修饰符" class="headerlink" title="y修饰符"></a>y修饰符</h4><p>y修饰符确保匹配必须从剩余的第一个位置开始</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var s = &apos;aaa_aa_a&apos;;</div><div class="line">var r1 = /a+/g;</div><div class="line">var r2 = /a+/y;</div><div class="line"></div><div class="line">r1.exec(s) // [&quot;aaa&quot;]</div><div class="line">r2.exec(s) // [&quot;aaa&quot;]</div><div class="line"></div><div class="line">r1.exec(s) // [&quot;aa&quot;]</div><div class="line">r2.exec(s) // null</div></pre></td></tr></table></figure>
<h4 id="sticky属性"><a href="#sticky属性" class="headerlink" title="sticky属性"></a>sticky属性</h4><p>是否设置了y修饰符</p>
<h4 id="flags-属性"><a href="#flags-属性" class="headerlink" title="flags 属性"></a>flags 属性</h4><p>返回正则表达式的修饰符</p>
<h4 id="后行断言"><a href="#后行断言" class="headerlink" title="后行断言"></a>后行断言</h4><p>x只有在y后面才匹配，必须写成/(?&lt;=y)x/<br>x只有不在y后面才匹配，必须写成/(?&lt;!y)x/</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《ECMAScript 6入门（第三版）》读书笔记——字符串扩展]]></title>
      <url>/2017/11/05/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h4 id="codePointAt"><a href="#codePointAt" class="headerlink" title="codePointAt()"></a>codePointAt()</h4><p>正确返回32位utf-16字符，两字节返回结果与charCodeAt()相同</p>
<h4 id="String-fromCodePoint"><a href="#String-fromCodePoint" class="headerlink" title="String.fromCodePoint()"></a>String.fromCodePoint()</h4><p>从码点返回32位utf-16字符</p>
<h4 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h4><p>返回布尔值，表示是否找到了参数字符串</p>
<h4 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith()"></a>startsWith()</h4><p>返回布尔值，表示参数字符串是否在原字符串的头部</p>
<h4 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith()"></a>endsWith()</h4><p>返回布尔值，表示参数字符串是否在原字符串的尾部</p>
<h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h4><p>返回一个新字符串，表示将原字符串重复n次</p>
<ul>
<li>小数，会被取整</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;na&apos;.repeat(2.9) // &quot;nana&quot;</div></pre></td></tr></table></figure>
<ul>
<li>参数是负数或者Infinity，会报错</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  &apos;na&apos;.repeat(Infinity)</div><div class="line">// RangeError</div><div class="line">&apos;na&apos;.repeat(-1)</div><div class="line">// RangeError</div></pre></td></tr></table></figure>
<ul>
<li>参数是0到-1之间的小数，则等同于0，这是因为会先进行取整运算。0到-1之间的小数，取整以后  等于-0，repeat视同为0</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;na&apos;.repeat(-0.9) // &quot;&quot;</div></pre></td></tr></table></figure>
<ul>
<li>参数NaN等同于0</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;na&apos;.repeat(NaN) // &quot;&quot;</div></pre></td></tr></table></figure>
<ul>
<li>参数是字符串，则会先转换成数字</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;na&apos;.repeat(&apos;na&apos;) // &quot;&quot;</div><div class="line">&apos;na&apos;.repeat(&apos;3&apos;) // &quot;nanana&quot;</div></pre></td></tr></table></figure>
<h4 id="padStart-，padEnd"><a href="#padStart-，padEnd" class="headerlink" title="padStart()，padEnd()"></a>padStart()，padEnd()</h4><p>如果某个字符串不够指定长度，头部补全和尾部补全<br>第一个参数用来指定字符串的最小长度，第二个参数是用来补全的字符串</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&apos;x&apos;.padStart(5, &apos;ab&apos;) // &apos;ababx&apos;</div><div class="line">&apos;x&apos;.padStart(4, &apos;ab&apos;) // &apos;abax&apos;</div><div class="line"></div><div class="line">&apos;x&apos;.padEnd(5, &apos;ab&apos;) // &apos;xabab&apos;</div><div class="line">&apos;x&apos;.padEnd(4, &apos;ab&apos;) // &apos;xaba&apos;</div></pre></td></tr></table></figure>
<h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><ul>
<li>大括号内部可以放入任意的JavaScript表达式，可以进行运算，以及引用对象属性，还能调用函数</li>
<li>大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的toString方法</li>
<li>大括号内部是一个字符串，将会原样输出</li>
<li>能嵌套</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">//传统模板</div><div class="line">$(&apos;#result&apos;).append(</div><div class="line">  &apos;There are &lt;b&gt;&apos; + basket.count + &apos;&lt;/b&gt; &apos; +</div><div class="line">  &apos;items in your basket, &apos; +</div><div class="line">  &apos;&lt;em&gt;&apos; + basket.onSale +</div><div class="line">  &apos;&lt;/em&gt; are on sale!&apos;</div><div class="line">);</div><div class="line"></div><div class="line">//ES6模板</div><div class="line">$(&apos;#result&apos;).append(`</div><div class="line">  There are &lt;b&gt;$&#123;basket.count&#125;&lt;/b&gt; items</div><div class="line">   in your basket, &lt;em&gt;$&#123;basket.onSale&#125;&lt;/em&gt;</div><div class="line">  are on sale!</div><div class="line">`);</div><div class="line"></div><div class="line">//不换行</div><div class="line">$(&apos;#list&apos;).html(`</div><div class="line">&lt;ul&gt;</div><div class="line">  &lt;li&gt;first&lt;/li&gt;</div><div class="line">  &lt;li&gt;second&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">`.trim());</div><div class="line"></div><div class="line">//引用模板字符串本身</div><div class="line">// 写法一</div><div class="line">let str = &apos;return &apos; + &apos;`Hello $&#123;name&#125;!`&apos;;</div><div class="line">let func = new Function(&apos;name&apos;, str);</div><div class="line">func(&apos;Jack&apos;) // &quot;Hello Jack!&quot;</div><div class="line"></div><div class="line">// 写法二</div><div class="line">let str = &apos;(name) =&gt; `Hello $&#123;name&#125;!`&apos;;</div><div class="line">let func = eval.call(null, str);</div><div class="line">func(&apos;Jack&apos;) // &quot;Hello Jack!&quot;</div></pre></td></tr></table></figure>
<h4 id="String-raw"><a href="#String-raw" class="headerlink" title="String.raw()"></a>String.raw()</h4><p>返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串，如果原字符串的斜杠已经转义，那么String.raw不会做任何处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String.raw`Hi\n$&#123;2+3&#125;!`;</div><div class="line">// &quot;Hi\\n5!&quot;</div><div class="line"></div><div class="line">String.raw`Hi\u000A!`;</div><div class="line">// &apos;Hi\\u000A!&apos;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《ECMAScript 6入门（第三版）》读书笔记——解构赋值]]></title>
      <url>/2017/11/05/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
      <content type="html"><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>从数组和对象中提取值，对变量进行赋值</p>
<hr>
<blockquote>
<h4 id="数组解构赋值"><a href="#数组解构赋值" class="headerlink" title="数组解构赋值"></a>数组解构赋值</h4></blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">let [a, b, c] = [1, 2, 3];</div><div class="line">let [foo, [[bar], baz]] = [1, [[2], 3]]</div><div class="line">let [head, ...tail] = [1, 2, 3, 4];</div><div class="line">  head // 1</div><div class="line">  tail // [2, 3, 4]</div><div class="line"></div><div class="line">let [x, y, z] = new Set([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]);</div><div class="line">  x // &quot;a&quot;</div></pre></td></tr></table></figure>
<h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ul>
<li>允许指定默认值，如果数组成员是null或不严格相等undefined，默认值不生效，默认值可以引用解构赋值的其他变量，但该变量必须已经声明</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let [x, y = &apos;b&apos;] = [&apos;a&apos;]; // x=&apos;a&apos;, y=&apos;b&apos;</div><div class="line">let [x = 1, y = x] = [];     // x=1; y=1</div></pre></td></tr></table></figure>
<ul>
<li>数组的元素是按次序排列的，变量的取值由它的位置决定</li>
</ul>
<hr>
<blockquote>
<h4 id="对象解构赋值"><a href="#对象解构赋值" class="headerlink" title="对象解构赋值"></a>对象解构赋值</h4></blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let &#123; foo, bar &#125; = &#123; foo: &quot;aaa&quot;, bar: &quot;bbb&quot; &#125;;</div><div class="line">foo // &quot;aaa&quot;</div><div class="line">bar // &quot;bbb&quot;</div></pre></td></tr></table></figure>
<ul>
<li>对象的属性没有次序，变量必须与属性同名，才能取到正确的值</li>
<li>默认值生效的条件是，对象的属性值严格等于undefined</li>
</ul>
<hr>
<blockquote>
<h4 id="字符串解构赋值"><a href="#字符串解构赋值" class="headerlink" title="字符串解构赋值"></a>字符串解构赋值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const [a, b, c, d, e] = &apos;hello&apos;;</div><div class="line">a // &quot;h&quot;</div><div class="line">b // &quot;e&quot;</div><div class="line">c // &quot;l&quot;</div><div class="line">d // &quot;l&quot;</div><div class="line">e // &quot;o&quot;</div><div class="line"></div><div class="line">let &#123;length : len&#125; = &apos;hello&apos;;</div><div class="line">len // 5</div></pre></td></tr></table></figure>
</blockquote>
<hr>
<blockquote>
<h4 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h4></blockquote>
<ul>
<li>只要等号右边的值不是对象或数组，就先将其转为对象</li>
<li>undefined和null无法转为对象，所以对它们进行解构赋值，都会报错</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let &#123;toString: s&#125; = 123;</div><div class="line">s === Number.prototype.toString // true</div><div class="line"></div><div class="line">let &#123;toString: s&#125; = true;</div><div class="line">s === Boolean.prototype.toString // true</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<h4 id="函数参数解构赋值"><a href="#函数参数解构赋值" class="headerlink" title="函数参数解构赋值"></a>函数参数解构赋值</h4></blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function add([x, y])&#123;</div><div class="line">  return x + y;</div><div class="line">&#125;</div><div class="line">add([1, 2]); // 3</div><div class="line"></div><div class="line">[[1, 2], [3, 4]].map(([a, b]) =&gt; a + b);</div><div class="line">// [ 3, 7 ]</div><div class="line"></div><div class="line">//函数参数的解构使用默认值</div><div class="line">function move(&#123;x = 0, y = 0&#125; = &#123;&#125;) &#123;</div><div class="line">  return [x, y];</div><div class="line">&#125;</div><div class="line">move(&#123;x: 3, y: 8&#125;); // [3, 8]</div><div class="line">move(&#123;x: 3&#125;); // [3, 0]</div><div class="line">move(&#123;&#125;); // [0, 0]</div><div class="line">move(); // [0, 0]</div><div class="line"></div><div class="line">//undefined就会触发函数参数的默认值</div><div class="line">[1, undefined, 3].map((x = &apos;yes&apos;) =&gt; x);</div><div class="line">// [ 1, &apos;yes&apos;, 3 ]</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<h4 id="圆括号问题"><a href="#圆括号问题" class="headerlink" title="圆括号问题"></a>圆括号问题</h4></blockquote>
<p>不能使用圆括号</p>
<ul>
<li>变量声明语句</li>
<li>函数参数</li>
<li>赋值语句的模式</li>
</ul>
<p>可以使用圆括号</p>
<ul>
<li>赋值语句的非模式部分</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[(b)] = [3]; // 正确</div><div class="line">(&#123; p: (d) &#125; = &#123;&#125;); // 正确</div><div class="line">[(parseInt.prop)] = [3]; // 正确</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4></blockquote>
<ul>
<li>交换变量的值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let x = 1;</div><div class="line">let y = 2;</div><div class="line">[x, y] = [y, x];</div></pre></td></tr></table></figure>
<ul>
<li>从函数返回多个值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 返回一个数组</div><div class="line">function example() &#123;</div><div class="line">  return [1, 2, 3];</div><div class="line">&#125;</div><div class="line">let [a, b, c] = example();</div><div class="line"></div><div class="line">// 返回一个对象</div><div class="line">function example() &#123;</div><div class="line">  return &#123;</div><div class="line">    foo: 1,</div><div class="line">    bar: 2</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">let &#123; foo, bar &#125; = example();</div></pre></td></tr></table></figure>
<ul>
<li>函数参数的定义</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 参数是一组有次序的值</div><div class="line">function f([x, y, z]) &#123; ... &#125;</div><div class="line">f([1, 2, 3]);</div><div class="line"></div><div class="line">// 参数是一组无次序的值</div><div class="line">function f(&#123;x, y, z&#125;) &#123; ... &#125;</div><div class="line">f(&#123;z: 3, y: 2, x: 1&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>提取JSON数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">let jsonData = &#123;</div><div class="line">  id: 42,</div><div class="line">  status: &quot;OK&quot;,</div><div class="line">  data: [867, 5309]</div><div class="line">&#125;;</div><div class="line">let &#123; id, status, data: number &#125; = jsonData;</div><div class="line">console.log(id, status, number);</div><div class="line">// 42, &quot;OK&quot;, [867, 5309]</div></pre></td></tr></table></figure>
<ul>
<li>函数参数的默认值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">jQuery.ajax = function (url, &#123;</div><div class="line">  async = true,</div><div class="line">  beforeSend = function () &#123;&#125;,</div><div class="line">  cache = true,</div><div class="line">  complete = function () &#123;&#125;,</div><div class="line">  crossDomain = false,</div><div class="line">  global = true,</div><div class="line">  // ... more config</div><div class="line">&#125;) &#123;</div><div class="line">  // ... do stuff</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>遍历Map结构</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">const map = new Map();</div><div class="line">map.set(&apos;first&apos;, &apos;hello&apos;);</div><div class="line">map.set(&apos;second&apos;, &apos;world&apos;);</div><div class="line"></div><div class="line">for (let [key, value] of map) &#123;</div><div class="line">  console.log(key + &quot; is &quot; + value);</div><div class="line">&#125;</div><div class="line">// first is hello</div><div class="line">// second is world</div><div class="line"></div><div class="line">// 获取键名</div><div class="line">for (let [key] of map) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 获取键值</div><div class="line">for (let [,value] of map) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>输入模块的指定方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const &#123; SourceMapConsumer, SourceNode &#125; = require(&quot;source-map&quot;);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《ECMAScript 6入门（第三版）》读书笔记——let & const]]></title>
      <url>/2017/11/05/let-const/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3></blockquote>
<hr>
<h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ul>
<li>没有变量提升</li>
<li>只在命令所在代码块内有效</li>
<li>不能在相同作用域内，重复声明同一个变量</li>
<li>暂时性死区，即不可再let声明之前使用变量，抛出错误</li>
</ul>
<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul>
<li>for循环计数器</li>
</ul>
<hr>
<blockquote>
<h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3></blockquote>
<h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p>变量指向的那个内存地址不得改动</p>
<ul>
<li>简单数据类型，值保存在变量指向的内存地址</li>
<li>复合类型，保存的是一个指针，内部数据结构不能控制</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[First Log]]></title>
      <url>/2017/11/04/myFirstLog/</url>
      <content type="html"><![CDATA[<h1 id="Welcome-to-my-sharelogs"><a href="#Welcome-to-my-sharelogs" class="headerlink" title="Welcome to my sharelogs"></a>Welcome to my sharelogs</h1>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/11/03/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
    
  
</search>
